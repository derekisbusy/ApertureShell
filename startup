#!/usr/bin/env python3
#Released under the MIT licence
import os
import platform
import sys
import datetime
from subprocess import call

header="Welcome to GLaDOS"
cmd=""

#Get ascii art
ascii_file=open("ascii.txt",'r').readlines()
ascii_lines=0

for i in ascii_file:
	ascii_lines+=1

def adapt_resolution():
	global term_width
	global term_height
	global offset_str
	global header_separator
	global footer_separator
	
	term_width=os.get_terminal_size().columns #We have check this every time
	term_height=os.get_terminal_size().lines
	offset_str=""
	header_separator=""
	footer_separator=""
	for i in range(term_width-len(ascii_file[0])): #leave space for the length of the ascii art
		offset_str+=" "
	for i in range(term_width):
		header_separator+="Â¯"
		footer_separator+="_"

def insert_in_offset(insert_string): #Inserts a string into the offset
	str=insert_string
	for i in range((term_width-len(insert_string))-len(ascii_file[0])): #40 is the width of ascii art
		str+=" "
	return str

def show_intro():
	call("tput setab 94",shell=True)
	call("tput setaf 136",shell=True) #Color the screen properly
	adapt_resolution()
	time="| "+str(datetime.datetime.now()).split(".")[0]
	gap_length=""
	for i in range(term_width-len(time)-len(header)):
		gap_length+=" "
	
	print("\033[1m"+header+gap_length+time+"\033[0m")
	call("tput setab 94",shell=True)
	call("tput setaf 136",shell=True) #Color the screen properly
	print(header_separator)
	print(insert_in_offset("  System Specifications:")+ascii_file[0].replace("\n",""))
	print(insert_in_offset("    OS: "+platform.system()+" "+platform.release())+ascii_file[1].replace("\n",""))
	print(insert_in_offset("    CPU: "+platform.architecture()[0]+" "+platform.machine().replace("_","-"))+ascii_file[2].replace("\n",""))
	
	for i in range(3,ascii_lines):
		print(offset_str+ascii_file[i].replace("\n",""))
	
	print(footer_separator)

def clear_console():
	adapt_resolution()
	for i in range(term_height): #Scroll up!
		print("")
	
show_intro()
if platform.system()=="Darwin":
	call("say Hello, and, again, welcome, to the aperture science computer aided enrichment centre",shell=True)
while 1==1:
	call("tput setab 94",shell=True)
	call("tput setaf 136",shell=True)
	clear_console()
	if cmd.split(" ")[0]!="cd":
		call(cmd,shell=True)
	else:
		os.chdir(cmd.split(" ")[1]) #Fix for the cd command which doesn't work through 'call'
	adapt_resolution()
	print(footer_separator)
	if cmd=="":
		show_intro()
	elif cmd=="exit":
		sys.exit()
	cmd=input(">")
