#!/usr/bin/env python3
#Released under the MIT licence
import os
import platform
import sys
import datetime
import getpass
from subprocess import call

#####################################################
with open("config.txt", "rb") as _file:
	
	exec(compile(_file.read(), "config.txt", 'exec')) #Takes config in
	_file.close()
#####################################################

cmd=""

#Get ascii art
with open("ascii.txt",'r') as _file:
	ascii_file=_file.readlines()
	_file.close()

ascii_lines=0

for i in ascii_file:
	ascii_lines+=1

def adapt_resolution():
	global term_width
	global term_height
	global offset_str
	global header_separator
	global footer_separator
	
	termSize=getTerminalSize()
	term_width=termSize[0] #We have check this every time
	term_height=termSize[1]
	offset_str=""
	header_separator=""
	footer_separator=""
	for i in range(term_width-len(ascii_file[0])): #leave space for the length of the ascii art
		offset_str+=" "
	for i in range(term_width):
		header_separator+="Â¯"
		footer_separator+="_"

def insert_in_offset(insert_string): #Inserts a string into the offset
	str=insert_string
	for i in range((term_width-len(insert_string))-len(ascii_file[0])): #40 is the width of ascii art
		str+=" "
	return str

def show_intro():
	call("tput setab "+str(background_color),shell=True)
	call("tput setaf "+str(foreground_color),shell=True) #Color the screen properly
	adapt_resolution()
	time=getpass.getuser()+"| "+str(datetime.datetime.now()).split(".")[0]
	gap_length=""
	for i in range(term_width-len(time)-len(header)):
		gap_length+=" "
	
	print("\033[1m"+header+gap_length+time+"\033[0m")
	call("tput setab "+str(background_color),shell=True)
	call("tput setaf "+str(foreground_color),shell=True) #Color the screen properly
	print(header_separator)
	
	if alignment==1:
		print(insert_in_offset("  System Specifications:")+ascii_file[0].replace("\n",""))
		print(insert_in_offset("    OS: "+platform.system()+" "+platform.release())+ascii_file[1].replace("\n",""))
		print(insert_in_offset("    CPU: "+platform.architecture()[0]+" "+platform.machine().replace("_","-"))+ascii_file[2].replace("\n",""))
	
		for i in range(3,ascii_lines):
			print(offset_str+ascii_file[i].replace("\n",""))
	elif alignment==0:
		print(ascii_file[0].replace("\n","")+insert_in_offset("  System Specifications:"))
		print(ascii_file[1].replace("\n","")+insert_in_offset("    OS: "+platform.system()+" "+platform.release()))
		print(ascii_file[2].replace("\n","")+insert_in_offset("    CPU: "+platform.architecture()[0]+" "+platform.machine().replace("_","-")))
	
		for i in range(3,ascii_lines):
			if (i+4)<term_height: #Cut off if it the ascii art is bigger than the screen size
				print(ascii_file[i].replace("\n","")+offset_str)
	
	for i in range(term_height-ascii_lines-4): #Fill in any excess space with whitespace so as to make it look more pleasing when resized
		print("")
	print(footer_separator)

def clear_console():
	adapt_resolution()
	for i in range(term_height): #Scroll up!
		print("")
	
def getTerminalSize():
    import os
    env = os.environ
    def ioctl_GWINSZ(fd):
        try:
            import fcntl, termios, struct, os
            cr = struct.unpack('hh', fcntl.ioctl(fd, termios.TIOCGWINSZ,
        '1234'))
        except:
            return
        return cr
    cr = ioctl_GWINSZ(0) or ioctl_GWINSZ(1) or ioctl_GWINSZ(2)
    if not cr:
        try:
            fd = os.open(os.ctermid(), os.O_RDONLY)
            cr = ioctl_GWINSZ(fd)
            os.close(fd)
        except:
            pass
    if not cr:
        cr = (env.get('LINES', 25), env.get('COLUMNS', 80))
        ### Use get(key[, default]) instead of a try/catch
        #try:
        #    cr = (env['LINES'], env['COLUMNS'])
        #except:
        #    cr = (25, 80)
    return int(cr[1]), int(cr[0])

show_intro()
if platform.system()=="Darwin":
	call("say Hello, and, again, welcome, to the aperture science computer aided enrichment centre",shell=True)
while 1==1:
	call("tput setab "+str(background_color),shell=True)
	call("tput setaf "+str(foreground_color),shell=True)
	clear_console()
	if cmd.split(" ")[0]!="cd":
		call(cmd,shell=True)
	else:
		try:
			os.chdir(cmd.split(" ")[1]) #Fix for the cd command which doesn't work through 'call'
		except:
			print("Error: Could not change directory to "+cmd.split(" ")[1])
	adapt_resolution()
	print(footer_separator)
	if cmd=="":
		show_intro()
	elif cmd=="exit":
		sys.exit()
	cmd=input(input_prompt)
